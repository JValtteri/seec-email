## SEEC - Secure Encrypted Email Client
## Programming project for Secure Programming course at TUNI
##
## Module for handling cryptographic features
## 17. Apr. 2024


import gnupg

class RSAConfigurationError(Exception):
    """Exception raised for errors in the configuration."""

def __get_gpg():
    gpg = gnupg.GPG(
        gnupghome="/path/to/home/directory",
        keyring="seec-keys"
        )
    gpg.encoding = 'utf-8'
    return gpg

def __generate_rsa_key_pair(name, email, password, length=1024):
    gpg = __get_gpg()
    key_settings = gpg.gen_key_input(
        key_type="RSA",
        key_length=1024,
        passphrase=password,
        name_real="Autogenerated Key",
        name_comment="Generated by gnupg.py",
        name_email=email
        )
    key = gpg.gen_key(key_settings)
    return key

def __generate_elliptic_curve_key_pair(name, email, password):
    gpg = __get_gpg()
    key_settings = gpg.gen_key_input(
        key_type="EDDSA",
        key_curve="ed25519",    #"cv25519",
        passphrase=password,
        name_real="Autogenerated Key",
        name_comment="Generated by gnupg.py",
        name_email=email
        )
    key = gpg.gen_key(key_settings)
    return key

def generate_key_pair(name, email, length=1024, type='rsa'):
    if length not in [1024, 2048]:
        raise RSAConfigurationError(f"Unsupported key length: {length}")
    if type == 'rsa':
        key = __generate_rsa_key_pair(name, email, password, length)
    if type == 'elliptic':
        key = __generate_elliptic_curve_key_pair(name, email, password)
    return key

def encrypt_with_key(data, recipient):
    gpg = __get_gpg()
    return gpg.encrypt(data, recipient)

def decrypt_with_key(data, password):
    gpg = __get_gpg(passphrase=password)
    return gpg.decrypt(data)

